@startuml
hide empty members

skinparam package {
 backgroundColor Lightblue
}
skinparam class {
 backgroundColor Whitesmoke 
}

title Class and module dependencies 

package com.google.inject {
	interface Injector
	interface Module
	class AbstractModule
	Module <|- AbstractModule
}

package "plugin-api" {
	class "SimpleExtensionRegistry<T>" as SimpleExtensionRegistry_T_ {
		+{static} create(type: Class<T>): SimpleExtensionRegistry<T>
	}
	interface "ExtensionRegistry<T>" as ExtensionRegistry_T_ {
		+registerExtension(extension: T): void
		+unregisterExtension(extension: T): void
		+getAllExtensions(): List<T>
		+getExtensionType(): Class<T>
	}
	ExtensionRegistry_T_ <|.. SimpleExtensionRegistry_T_
	
	class "SimpleNamedExtensionRegistry<T>" as SimpleNamedExtensionRegistry_T_  {
		+{static} create(type: Class<T>): SimpleNamedExtensionRegistry<T>
	}
	interface "NamedExtensionRegistry<T>" as NamedExtensionRegistry_T_ {
		+registerExtension(name: String, extension: Provider<T>): void
		+unregisterExtension(name: String): void
		+getAllExtensionNames(): Set<String>
		+getExtensionByName(name: String): T
		+getExtensionType(): Class<T>
	}
	NamedExtensionRegistry_T_ <|.. SimpleNamedExtensionRegistry_T_
}

package "plugin-core" {
	class PluginModule {
		-javaModule: Module
		-guiceModule: com.google.inject.Module
		-injector: Injector
		+isInitialized(): boolean
		+moduleName(): String
		+javaModule(): Module
		+setParentPlugin(parentPlugin: PluginModule): void
		+extensionRegistries(): Set<ExtensionRegistry>
		+initialize(): void
	}
	PluginModule --> "1" PluginModule : parentPlugin
	class PluginModuleLoader [[java:de.vagtsi.examples.guicejavamodule.app.PluginModuleLoader]] {
		+{static} loadPluginsFromModulePath(): Map<String,PluginModule>
		+{static} loadPluginsFromDirectory(pluginsDir: Path):  Map<String, PluginModule> {
		-{static} initializePluginModules(loader: ServiceLoader<Module>): Map<String, PluginModule>
		-{static} resolveDependencies(pluginModules: Map<String,PluginModule>): void
	}
}

"plugin-core" --> "plugin-api"

package "greeting-core" {
	interface GreetingService {
		hello(): String
	}
	
	class GreetingCoreModule {
		+greetingServiceRegistry(): ExtensionRegistry
	}
	AbstractModule <|-- GreetingCoreModule
}

package "database-core" {
	class DatabaseCoreModule {
		+databaseServiceRegistry(): NamedExtensionRegistry
	}
	AbstractModule <|-- DatabaseCoreModule

	interface DatabaseService {
		+databaseName(): String
	}
}

rectangle "dynamic plugins" #Skyblue {

package "greeting-french" {
	class FrenchGreetingServiceImpl {
		+hello(): String
	}
	interface GreetingService {
	}
	GreetingService <|.. FrenchGreetingServiceImpl
	class FrenchGreetingModule  {
		+frenchGreetingService(): GreetingService
	}
	AbstractModule <|-- FrenchGreetingModule
}

package "greeting-german" {
	class GermanGreetingModule {
		+germanGreetingService(): GreetingService
	}
	AbstractModule <|-- GermanGreetingModule
	class GermanGreetingServiceImpl {
		+hello(): String
	}
	interface GreetingService {
	}
	GreetingService <|.. GermanGreetingServiceImpl
}

package "greeting-english" {
	class EnglishGreetingModule {
		+englishGreetingService(): GreetingService
	}
	AbstractModule <|-- EnglishGreetingModule
	class EnglishGreetingServiceImpl {
		+hello(): String
	}
	interface GreetingService {
	}
	GreetingService <|.. EnglishGreetingServiceImpl
}

package "database-mongo" {
	class MongoDatabaseServiceImpl {
		+databaseName(): String
	}
	DatabaseService <|.. MongoDatabaseServiceImpl

	class MongoDatabaseModule {
		+mongodbDatabaseService(): DatabaseService
	}
	AbstractModule <|-- MongoDatabaseModule
}
package "database-postgres" {
	class PostgresDatabaseServiceImpl {
		+databaseName(): String
	}
	DatabaseService <|.. PostgresDatabaseServiceImpl
	class PostgresDatabaseModule {
		+postgresDatabaseService(): DatabaseService
	}
	AbstractModule <|-- PostgresDatabaseModule
}
}

package "application" {
	class GuiceModuleApp {
		+{static} main(args: String[]): void
		-init(): void
	}
}

"application" --> "plugin-api"
"application" --> "plugin-core"
"application" --> "greeting-core"
"application" --> "database-core"

@enduml